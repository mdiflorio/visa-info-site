{"version":3,"sources":["components/DropDownMenu/index.js","components/Button/index.js","modules/api.js","assets/nationalityList.js","helpers/countryCodes.js","components/InfoContainer/index.js","helpers/getVisaRestrictionColor.js","App.js","serviceWorker.js","index.js"],"names":["DropDownMenu","_ref","handleChange","type","data","loading","react_default","a","createElement","Dropdown","placeholder","concat","fluid","search","selection","onChange","options","disabled","length","Button","onClick","text","BASE_URL","nationalityList","isoCountries","Afghanistan","Aland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Republic of the Congo","Democratic Republic of the Congo","Cook Islands","Costa Rica","Côte d'Ivoire","Croatia","Cuba","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island & Mcdonald Islands","Vatican City","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle Of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","North Korea","South Korea","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestinian Territory, Occupied","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Barthelemy","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Martin","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","São Tomé and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia And Sandwich Isl.","Spain","Sri Lanka","Sudan","South Sudan","Suriname","Svalbard And Jan Mayen","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks And Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","United States Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Vietnam","Virgin Islands, British","Virgin Islands, U.S.","Wallis And Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","getCountryCode","country","flag","toLowerCase","InfoContainer","info","circleColor","visaRestriction","trim","getVisaRestrictionColor","visatype","Segment","className","style","backgroundColor","duration","note","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNationalityChange","e","value","setState","nationality","countries","names","objectSpread","state","countriesList","arguments","undefined","Promise","resolve","reject","axios","get","then","response","catch","error","console","log","Api","countryNames","i","push","key","handleCountryChange","_ref2","inputs","handleSubmit","_this$state","infoContainer","selected","setTimeout","nationalities","forEach","_this$state2","components_DropDownMenu","src_components_Button","Loader","inline","active","src_components_InfoContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAkBeA,EAfM,SAAAC,GAA2C,IAAxCC,EAAwCD,EAAxCC,aAAcC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,QAChD,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,YAAW,UAAAC,OAAYR,GACvBS,OAAK,EACLC,QAAM,EACNC,WAAS,EACTC,SAAUb,EACVc,QAASZ,EACTa,SAA0B,IAAhBb,EAAKc,OACfb,QAASA,KCNAc,UAJA,SAAAlB,GAAuB,IAApBmB,EAAoBnB,EAApBmB,QAASC,EAAWpB,EAAXoB,KACzB,OAAOf,EAAAC,EAAAC,cAAA,UAAQY,QAASA,GAAUC,sBCF9BC,EAAW,sCCFF,IAAAC,EAAA,CACb,SACA,WACA,WACA,WACA,UACA,sBACA,YACA,WACA,aACA,WACA,cACA,WACA,WACA,cACA,YACA,aACA,UACA,WACA,WACA,YACA,WACA,yBACA,WACA,YACA,UACA,+BACA,mBACA,+BACA,WACA,YACA,YACA,YACA,YACA,cACA,WACA,eACA,2BACA,UACA,UACA,UACA,YACA,WACA,mCACA,wBACA,cACA,WACA,QACA,UACA,QACA,SACA,aACA,WACA,qBACA,QACA,gBACA,aACA,iBACA,WACA,cACA,UACA,qBACA,WACA,WACA,QACA,YACA,iBACA,SACA,UACA,SACA,WACA,UACA,WACA,SACA,WACA,QACA,YACA,aACA,UACA,kBACA,WACA,UACA,WACA,YACA,YACA,SACA,aACA,UACA,QACA,QACA,UACA,UACA,UACA,WACA,WACA,YACA,cACA,SACA,WACA,eACA,eACA,UACA,UACA,cACA,UACA,UACA,WACA,UACA,WACA,SACA,gBACA,aACA,gBACA,aACA,WACA,WACA,YACA,YACA,SACA,UACA,uEACA,mBACA,cACA,YACA,UACA,cACA,WACA,gBACA,YACA,cACA,WACA,aACA,UACA,UACA,WACA,UACA,WACA,cACA,aACA,WACA,WACA,mBACA,YACA,QACA,YACA,UACA,cACA,aACA,oBACA,aACA,WACA,aACA,SACA,aACA,SACA,WACA,UACA,UACA,wBACA,eACA,mCACA,SACA,cACA,YACA,QACA,aACA,UACA,cACA,iBACA,cACA,SACA,YACA,kBACA,SACA,aACA,gBACA,gBACA,iBACA,UACA,aACA,WACA,aACA,UACA,QACA,SACA,YACA,QACA,YACA,OACA,WACA,SACA,gBACA,sBACA,WACA,UACA,UACA,WACA,UACA,YACA,gBACA,YACA,cACA,YACA,UACA,aACA,aACA,SACA,UACA,cChNEC,EAAe,CACjBC,YAAa,KACbC,gBAAiB,KACjBC,QAAS,KACTC,QAAS,KACTC,iBAAkB,KAClBC,QAAS,KACTC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,sBAAuB,KACvBC,UAAW,KACXC,QAAS,KACTC,MAAO,KACPC,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,OAAQ,KACRC,QAAS,KACTC,yBAA0B,KAC1BC,SAAU,KACVC,gBAAiB,KACjBC,OAAQ,KACRC,iCAAkC,KAClCC,OAAQ,KACRC,SAAU,KACVC,eAAgB,KAChBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,2BAA4B,KAC5BC,KAAM,KACNC,MAAO,KACPC,MAAO,KACPC,mBAAoB,KACpBC,0BAA2B,KAC3BC,SAAU,KACVC,QAAS,KACTC,wBAAyB,KACzBC,mCAAoC,KACpCC,eAAgB,KAChBC,aAAc,KACdC,mBAAiB,KACjBC,QAAS,KACTC,KAAM,KACNC,OAAQ,KACRC,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,qBAAsB,KACtBC,QAAS,KACTC,MAAO,KACPC,cAAe,KACfC,oBAAqB,KACrBC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,mBAAoB,KACpBC,gBAAiB,KACjBC,KAAM,KACNC,QAAS,KACTC,OAAQ,KACRC,gBAAiB,KACjBC,mBAAoB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","file":"static/js/main.16b94eab.chunk.js","sourcesContent":["import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nconst DropDownMenu = ({ handleChange, type, data, loading }) => {\n  return (\n    <Dropdown\n      placeholder={`Select ${type}`}\n      fluid\n      search\n      selection\n      onChange={handleChange}\n      options={data}\n      disabled={data.length === 0 ? true : false}\n      loading={loading}\n    />\n  );\n};\n\nexport default DropDownMenu;\n","import React from \"react\";\nimport \"./index.scss\";\n\nconst Button = ({ onClick, text }) => {\n  return <button onClick={onClick}>{text}</button>;\n};\n\nexport default Button;\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://visa-info-api.herokuapp.com\";\n\nexport function fetchListOfCountries(nationality = \"\") {\n  const fetchPromise = new Promise((resolve, reject) => {\n    axios\n      .get(`${BASE_URL}/restrictions/${nationality}`)\n      .then(response => {\n        const countries = response.data.data.countries;\n        resolve(countries);\n      })\n      .catch(error => {\n        reject(error);\n        console.log(error);\n      });\n  });\n\n  return fetchPromise;\n}\n\nexport function fetchVisaRestrictions(nationality = \"\", country = \"\") {\n  const fetchPromise = new Promise((resolve, reject) => {\n    axios\n      .get(`${BASE_URL}/restrictions/${nationality}/${country}`)\n      .then(response => {\n        resolve(response);\n        console.log(response);\n      })\n      .catch(error => {\n        reject(error);\n        console.log(error);\n      });\n  });\n\n  return fetchPromise;\n}\n","export default [\n  \"Afghan\",\n  \"Albanian\",\n  \"Algerian\",\n  \"Andorran\",\n  \"Angolan\",\n  \"Antigua and Barbuda\",\n  \"Argentine\",\n  \"Armenian\",\n  \"Australian\",\n  \"Austrian\",\n  \"Azerbaijani\",\n  \"Bahamian\",\n  \"Bahraini\",\n  \"Bangladeshi\",\n  \"Barbadian\",\n  \"Belarusian\",\n  \"Belgian\",\n  \"Belizean\",\n  \"Beninese\",\n  \"Bhutanese\",\n  \"Bolivian\",\n  \"Bosnia and Herzegovina\",\n  \"Botswana\",\n  \"Brazilian\",\n  \"British\",\n  \"British Nationals (Overseas)\",\n  \"British Overseas\",\n  \"British Overseas Territories\",\n  \"Bruneian\",\n  \"Bulgarian\",\n  \"Burkinabe\",\n  \"Burundian\",\n  \"Cambodian\",\n  \"Cameroonian\",\n  \"Canadian\",\n  \"Cape Verdean\",\n  \"Central African Republic\",\n  \"Chadian\",\n  \"Chilean\",\n  \"Chinese\",\n  \"Colombian\",\n  \"Comorian\",\n  \"Democratic Republic of the Congo\",\n  \"Republic of the Congo\",\n  \"Costa Rican\",\n  \"Croatian\",\n  \"Cuban\",\n  \"Cypriot\",\n  \"Czech\",\n  \"Danish\",\n  \"Djiboutian\",\n  \"Dominica\",\n  \"Dominican Republic\",\n  \"Dutch\",\n  \"East Timorese\",\n  \"Ecuadorian\",\n  \"EFTA nationals\",\n  \"Egyptian\",\n  \"El Salvador\",\n  \"Emirati\",\n  \"Equatorial Guinean\",\n  \"Eritrean\",\n  \"Estonian\",\n  \"Swazi\",\n  \"Ethiopian\",\n  \"European Union\",\n  \"Fijian\",\n  \"Finnish\",\n  \"French\",\n  \"Gabonese\",\n  \"Gambian\",\n  \"Georgian\",\n  \"German\",\n  \"Ghanaian\",\n  \"Greek\",\n  \"Grenadian\",\n  \"Guatemalan\",\n  \"Guinean\",\n  \"Guinea-Bissauan\",\n  \"Guyanese\",\n  \"Haitian\",\n  \"Honduran\",\n  \"Hungarian\",\n  \"Icelandic\",\n  \"Indian\",\n  \"Indonesian\",\n  \"Iranian\",\n  \"Iraqi\",\n  \"Irish\",\n  \"Israeli\",\n  \"Italian\",\n  \"Ivorian\",\n  \"Jamaican\",\n  \"Japanese\",\n  \"Jordanian\",\n  \"Kazakhstani\",\n  \"Kenyan\",\n  \"Kiribati\",\n  \"North Korean\",\n  \"South Korean\",\n  \"Kosovan\",\n  \"Kuwaiti\",\n  \"Kyrgyzstani\",\n  \"Laotian\",\n  \"Latvian\",\n  \"Lebanese\",\n  \"Lesotho\",\n  \"Liberian\",\n  \"Libyan\",\n  \"Liechtenstein\",\n  \"Lithuanian\",\n  \"Luxembourgish\",\n  \"Macedonian\",\n  \"Malagasy\",\n  \"Malawian\",\n  \"Malaysian\",\n  \"Maldivian\",\n  \"Malian\",\n  \"Maltese\",\n  \"Holders of passports issued by the Sovereign Military Order of Malta\",\n  \"Marshall Islands\",\n  \"Mauritanian\",\n  \"Mauritian\",\n  \"Mexican\",\n  \"Micronesian\",\n  \"Moldovan\",\n  \"Monégasque\",\n  \"Mongolian\",\n  \"Montenegrin\",\n  \"Moroccan\",\n  \"Mozambican\",\n  \"Myanmar\",\n  \"Artsakh\",\n  \"Namibian\",\n  \"Nauruan\",\n  \"Nepalese\",\n  \"New Zealand\",\n  \"Nicaraguan\",\n  \"Nigerien\",\n  \"Nigerian\",\n  \"Northern Cypriot\",\n  \"Norwegian\",\n  \"Omani\",\n  \"Pakistani\",\n  \"Palauan\",\n  \"Palestinian\",\n  \"Panamanian\",\n  \"Papua New Guinean\",\n  \"Paraguayan\",\n  \"Peruvian\",\n  \"Philippine\",\n  \"Polish\",\n  \"Portuguese\",\n  \"Qatari\",\n  \"Romanian\",\n  \"Russian\",\n  \"Rwandan\",\n  \"Saint Kitts and Nevis\",\n  \"Saint Lucian\",\n  \"Saint Vincent and the Grenadines\",\n  \"Samoan\",\n  \"Sammarinese\",\n  \"Santomean\",\n  \"Saudi\",\n  \"Senegalese\",\n  \"Serbian\",\n  \"Seychellois\",\n  \"Sierra Leonean\",\n  \"Singaporean\",\n  \"Slovak\",\n  \"Slovenian\",\n  \"Solomon Islands\",\n  \"Somali\",\n  \"Somaliland\",\n  \"South African\",\n  \"South Ossetia\",\n  \"South Sudanese\",\n  \"Spanish\",\n  \"Sri Lankan\",\n  \"Sudanese\",\n  \"Surinamese\",\n  \"Swedish\",\n  \"Swiss\",\n  \"Syrian\",\n  \"Taiwanese\",\n  \"Tajik\",\n  \"Tanzanian\",\n  \"Thai\",\n  \"Togolese\",\n  \"Tongan\",\n  \"Transnistrian\",\n  \"Trinidad and Tobago\",\n  \"Tunisian\",\n  \"Turkish\",\n  \"Turkmen\",\n  \"Tuvaluan\",\n  \"Ugandan\",\n  \"Ukrainian\",\n  \"United States\",\n  \"Uruguayan\",\n  \"Uzbekistani\",\n  \"Vanuatuan\",\n  \"Vatican\",\n  \"Venezuelan\",\n  \"Vietnamese\",\n  \"Yemeni\",\n  \"Zambian\",\n  \"Zimbabwean\"\n];\n","var isoCountries = {\n  Afghanistan: \"AF\",\n  \"Aland Islands\": \"AX\",\n  Albania: \"AL\",\n  Algeria: \"DZ\",\n  \"American Samoa\": \"AS\",\n  Andorra: \"AD\",\n  Angola: \"AO\",\n  Anguilla: \"AI\",\n  Antarctica: \"AQ\",\n  \"Antigua and Barbuda\": \"AG\",\n  Argentina: \"AR\",\n  Armenia: \"AM\",\n  Aruba: \"AW\",\n  Australia: \"AU\",\n  Austria: \"AT\",\n  Azerbaijan: \"AZ\",\n  Bahamas: \"BS\",\n  Bahrain: \"BH\",\n  Bangladesh: \"BD\",\n  Barbados: \"BB\",\n  Belarus: \"BY\",\n  Belgium: \"BE\",\n  Belize: \"BZ\",\n  Benin: \"BJ\",\n  Bermuda: \"BM\",\n  Bhutan: \"BT\",\n  Bolivia: \"BO\",\n  \"Bosnia and Herzegovina\": \"BA\",\n  Botswana: \"BW\",\n  \"Bouvet Island\": \"BV\",\n  Brazil: \"BR\",\n  \"British Indian Ocean Territory\": \"IO\",\n  Brunei: \"BN\",\n  Bulgaria: \"BG\",\n  \"Burkina Faso\": \"BF\",\n  Burundi: \"BI\",\n  Cambodia: \"KH\",\n  Cameroon: \"CM\",\n  Canada: \"CA\",\n  \"Cape Verde\": \"CV\",\n  \"Cayman Islands\": \"KY\",\n  \"Central African Republic\": \"CF\",\n  Chad: \"TD\",\n  Chile: \"CL\",\n  China: \"CN\",\n  \"Christmas Island\": \"CX\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  Colombia: \"CO\",\n  Comoros: \"KM\",\n  \"Republic of the Congo\": \"CG\",\n  \"Democratic Republic of the Congo\": \"CD\",\n  \"Cook Islands\": \"CK\",\n  \"Costa Rica\": \"CR\",\n  \"Côte d'Ivoire\": \"CI\",\n  Croatia: \"HR\",\n  Cuba: \"CU\",\n  Cyprus: \"CY\",\n  \"Czech Republic\": \"CZ\",\n  Denmark: \"DK\",\n  Djibouti: \"DJ\",\n  Dominica: \"DM\",\n  \"Dominican Republic\": \"DO\",\n  Ecuador: \"EC\",\n  Egypt: \"EG\",\n  \"El Salvador\": \"SV\",\n  \"Equatorial Guinea\": \"GQ\",\n  Eritrea: \"ER\",\n  Estonia: \"EE\",\n  Eswatini: \"SZ\",\n  Ethiopia: \"ET\",\n  \"Falkland Islands\": \"FK\",\n  \"Faroe Islands\": \"FO\",\n  Fiji: \"FJ\",\n  Finland: \"FI\",\n  France: \"FR\",\n  \"French Guiana\": \"GF\",\n  \"French Polynesia\": \"PF\",\n  \"French Southern Territories\": \"TF\",\n  Gabon: \"GA\",\n  Gambia: \"GM\",\n  Georgia: \"GE\",\n  Germany: \"DE\",\n  Ghana: \"GH\",\n  Gibraltar: \"GI\",\n  Greece: \"GR\",\n  Greenland: \"GL\",\n  Grenada: \"GD\",\n  Guadeloupe: \"GP\",\n  Guam: \"GU\",\n  Guatemala: \"GT\",\n  Guernsey: \"GG\",\n  Guinea: \"GN\",\n  \"Guinea-Bissau\": \"GW\",\n  Guyana: \"GY\",\n  Haiti: \"HT\",\n  \"Heard Island & Mcdonald Islands\": \"HM\",\n  \"Vatican City\": \"VA\",\n  Honduras: \"HN\",\n  \"Hong Kong\": \"HK\",\n  Hungary: \"HU\",\n  Iceland: \"IS\",\n  India: \"IN\",\n  Indonesia: \"ID\",\n  Iran: \"IR\",\n  Iraq: \"IQ\",\n  Ireland: \"IE\",\n  \"Isle Of Man\": \"IM\",\n  Israel: \"IL\",\n  Italy: \"IT\",\n  Jamaica: \"JM\",\n  Japan: \"JP\",\n  Jersey: \"JE\",\n  Jordan: \"JO\",\n  Kazakhstan: \"KZ\",\n  Kenya: \"KE\",\n  Kiribati: \"KI\",\n  \"North Korea\": \"KP\",\n  \"South Korea\": \"KR\",\n  Kuwait: \"KW\",\n  Kyrgyzstan: \"KG\",\n  Laos: \"LA\",\n  Latvia: \"LV\",\n  Lebanon: \"LB\",\n  Lesotho: \"LS\",\n  Liberia: \"LR\",\n  Libya: \"LY\",\n  Liechtenstein: \"LI\",\n  Lithuania: \"LT\",\n  Luxembourg: \"LU\",\n  Macao: \"MO\",\n  Macedonia: \"MK\",\n  Madagascar: \"MG\",\n  Malawi: \"MW\",\n  Malaysia: \"MY\",\n  Maldives: \"MV\",\n  Mali: \"ML\",\n  Malta: \"MT\",\n  \"Marshall Islands\": \"MH\",\n  Martinique: \"MQ\",\n  Mauritania: \"MR\",\n  Mauritius: \"MU\",\n  Mayotte: \"YT\",\n  Mexico: \"MX\",\n  Micronesia: \"FM\",\n  Moldova: \"MD\",\n  Monaco: \"MC\",\n  Mongolia: \"MN\",\n  Montenegro: \"ME\",\n  Montserrat: \"MS\",\n  Morocco: \"MA\",\n  Mozambique: \"MZ\",\n  Myanmar: \"MM\",\n  Namibia: \"NA\",\n  Nauru: \"NR\",\n  Nepal: \"NP\",\n  Netherlands: \"NL\",\n  \"Netherlands Antilles\": \"AN\",\n  \"New Caledonia\": \"NC\",\n  \"New Zealand\": \"NZ\",\n  Nicaragua: \"NI\",\n  Niger: \"NE\",\n  Nigeria: \"NG\",\n  Niue: \"NU\",\n  \"Norfolk Island\": \"NF\",\n  \"Northern Mariana Islands\": \"MP\",\n  Norway: \"NO\",\n  Oman: \"OM\",\n  Pakistan: \"PK\",\n  Palau: \"PW\",\n  \"Palestinian Territory, Occupied\": \"PS\",\n  Panama: \"PA\",\n  \"Papua New Guinea\": \"PG\",\n  Paraguay: \"PY\",\n  Peru: \"PE\",\n  Philippines: \"PH\",\n  Pitcairn: \"PN\",\n  Poland: \"PL\",\n  Portugal: \"PT\",\n  \"Puerto Rico\": \"PR\",\n  Qatar: \"QA\",\n  Reunion: \"RE\",\n  Romania: \"RO\",\n  Russia: \"RU\",\n  Rwanda: \"RW\",\n  \"Saint Barthelemy\": \"BL\",\n  \"Saint Helena\": \"SH\",\n  \"Saint Kitts and Nevis\": \"KN\",\n  \"Saint Lucia\": \"LC\",\n  \"Saint Martin\": \"MF\",\n  \"Saint Pierre and Miquelon\": \"PM\",\n  \"Saint Vincent and the Grenadines\": \"VC\",\n  Samoa: \"WS\",\n  \"San Marino\": \"SM\",\n  \"São Tomé and Principe\": \"ST\",\n  \"Saudi Arabia\": \"SA\",\n  Senegal: \"SN\",\n  Serbia: \"RS\",\n  Seychelles: \"SC\",\n  \"Sierra Leone\": \"SL\",\n  Singapore: \"SG\",\n  Slovakia: \"SK\",\n  Slovenia: \"SI\",\n  \"Solomon Islands\": \"SB\",\n  Somalia: \"SO\",\n  \"South Africa\": \"ZA\",\n  \"South Georgia And Sandwich Isl.\": \"GS\",\n  Spain: \"ES\",\n  \"Sri Lanka\": \"LK\",\n  Sudan: \"SD\",\n  \"South Sudan\": \"SD\",\n  Suriname: \"SR\",\n  \"Svalbard And Jan Mayen\": \"SJ\",\n  Swaziland: \"SZ\",\n  Sweden: \"SE\",\n  Switzerland: \"CH\",\n  Syria: \"SY\",\n  Taiwan: \"TW\",\n  Tajikistan: \"TJ\",\n  Tanzania: \"TZ\",\n  Thailand: \"TH\",\n  \"Timor-Leste\": \"TL\",\n  Togo: \"TG\",\n  Tokelau: \"TK\",\n  Tonga: \"TO\",\n  \"Trinidad and Tobago\": \"TT\",\n  Tunisia: \"TN\",\n  Turkey: \"TR\",\n  Turkmenistan: \"TM\",\n  \"Turks And Caicos Islands\": \"TC\",\n  Tuvalu: \"TV\",\n  Uganda: \"UG\",\n  Ukraine: \"UA\",\n  \"United Arab Emirates\": \"AE\",\n  \"United Kingdom\": \"GB\",\n  \"United States\": \"US\",\n  \"United States Outlying Islands\": \"UM\",\n  Uruguay: \"UY\",\n  Uzbekistan: \"UZ\",\n  Vanuatu: \"VU\",\n  Venezuela: \"VE\",\n  Vietnam: \"VN\",\n  \"Virgin Islands, British\": \"VG\",\n  \"Virgin Islands, U.S.\": \"VI\",\n  \"Wallis And Futuna\": \"WF\",\n  \"Western Sahara\": \"EH\",\n  Yemen: \"YE\",\n  Zambia: \"ZM\",\n  Zimbabwe: \"ZW\"\n};\n\nexport function getCountryCode(country) {\n  const flag = isoCountries[country];\n\n  return typeof flag === \"string\" ? flag.toLowerCase() : \"\";\n}\n","import React from \"react\";\nimport \"./index.scss\";\nimport { Segment } from \"semantic-ui-react\";\nimport { getVisaRestrictionColor } from \"../../helpers/getVisaRestrictionColor\";\n\nconst InfoContainer = ({ data }) => {\n  const { info } = data;\n  const circleColor = getVisaRestrictionColor(info.visatype);\n  return (\n    <Segment>\n      <div>\n        <div className=\"visaTypeContainer\">\n          <div className=\"circle-container\">\n            <div className=\"circle\" style={{ backgroundColor: circleColor }} />\n            <h3>{info.visatype}</h3>\n            <br />\n          </div>\n        </div>\n        {info.duration !== \"\" && (\n          <div className=\"info\">\n            <h3>Duration</h3>\n            <p>{info.duration}</p>\n          </div>\n        )}\n\n        {info.note !== \"\" && (\n          <div className=\"info\">\n            <h3>Note:</h3>\n            <p>{info.note}</p>\n          </div>\n        )}\n      </div>\n    </Segment>\n  );\n};\n\nexport default InfoContainer;\n","export function getVisaRestrictionColor(visaRestriction) {\n  switch (visaRestriction.trim()) {\n    case \"Freedom of movement\":\n      return \"#0074D9\"; // Blue\n    case \"Visa not required\":\n      return \"#2ECC40\"; // Green\n    case \"Visa required\":\n      return \"#FF4136\"; // Red\n    case \"eVisa\":\n    case \"Visa on arrival\":\n    case \"eVisa / Visa on arrival\":\n    case \"Visitor's Permit on arrival\":\n    case \"Electronic Entry Visa\":\n    case \"eVisitor\":\n      return \"#FF851B\"; // Yellow\n    default:\n      return \"#001f3f\"; // Navy\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./app.scss\";\nimport DropDownMenu from \"./components/DropDownMenu\";\nimport Button from \"./components/Button\";\nimport * as Api from \"./modules/api\";\n\nimport nationalityList from \"./assets/nationalityList\";\nimport { getCountryCode } from \"./helpers/countryCodes\";\nimport InfoContainer from \"./components/InfoContainer\";\nimport { Loader } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    let nationalities = [];\n    // Format nationality list for dropdown\n    nationalityList.forEach(nationality => {\n      nationalities.push({\n        key: nationality,\n        value: nationality,\n        text: nationality\n      });\n    });\n\n    this.state = {\n      inputs: {\n        nationality: \"\",\n        country: \"\"\n      },\n      nationalities,\n      countries: {\n        info: [],\n        names: []\n      },\n      selected: {\n        info: null\n      },\n      loading: {\n        infoContainer: false,\n        countriesList: false\n      }\n    };\n  }\n\n  handleNationalityChange = (e, { value }) => {\n    // Set loading and reset old values.\n    this.setState({\n      nationality: value,\n      countries: {\n        info: [],\n        names: []\n      },\n      loading: {\n        ...this.state.loading,\n        countriesList: true\n      }\n    });\n\n    // Fetch from API.\n    Api.fetchListOfCountries(value).then(info => {\n      let countryNames = [];\n\n      // Organise data for dropdown.\n      for (let i in info) {\n        const flag = getCountryCode(info[i].country);\n        countryNames.push({\n          key: i + info[i].country,\n          value: i,\n          flag,\n          text: info[i].country\n        });\n      }\n\n      // Update state and stop loading\n      this.setState({\n        countries: {\n          info,\n          names: countryNames\n        },\n        loading: {\n          ...this.state.loading,\n          countriesList: false\n        }\n      });\n    });\n  };\n\n  handleCountryChange = (e, { value }) =>\n    this.setState({ inputs: { ...this.state.inputs, country: value } });\n\n  handleSubmit = () => {\n    const { loading, countries, inputs } = this.state;\n    // Show loading.\n    this.setState({\n      loading: {\n        ...loading,\n        infoContainer: true\n      },\n      selected: {\n        info: null\n      }\n    });\n\n    const selected = {\n      info: countries.info[inputs.country]\n    };\n    console.log(inputs);\n\n    setTimeout(() => {\n      this.setState({\n        selected,\n        loading: {\n          ...this.state.loading,\n          infoContainer: false\n        }\n      });\n    }, 400);\n  };\n\n  render() {\n    const { nationalities, countries, loading, selected } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h2>Visa Requirements</h2>\n          <div className=\"subheader\">\n            Select a nationality, then choose a country to view the country's\n            visa requirements for that nationality.\n          </div>\n          <h3>Nationality</h3>\n          <DropDownMenu\n            type=\"nationality\"\n            handleChange={this.handleNationalityChange}\n            data={nationalities}\n            loading={false}\n          />\n          <h3>Country</h3>\n          <DropDownMenu\n            type=\"country\"\n            handleChange={this.handleCountryChange}\n            data={countries.names}\n            loading={loading.countriesList}\n          />\n          <br />\n          <div className=\"btnContainer\">\n            <Button text=\"Submit\" onClick={this.handleSubmit} />\n          </div>\n          <br />\n\n          {loading.infoContainer && (\n            <div className=\"center\">\n              <Loader inline active>\n                Loading\n              </Loader>\n            </div>\n          )}\n          {selected.info && <InfoContainer data={selected} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}